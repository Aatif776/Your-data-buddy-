import React, { useState, useEffect } from 'react';

export default function YourDataBuddy() { const [storedData, setStoredData] = useState(0); const [dailyUsage, setDailyUsage] = useState(0); const [sim, setSim] = useState('Jio');

const [friendSim, setFriendSim] = useState('Jio'); const [friendData, setFriendData] = useState(0);

const [email, setEmail] = useState(''); const [phone, setPhone] = useState(''); const [isLoggedIn, setIsLoggedIn] = useState(false); const [startDate, setStartDate] = useState(null); const [isSubscribed, setIsSubscribed] = useState(false);

const [upiId] = useState('yourdata@upi');

useEffect(() => { if (isLoggedIn && !startDate) { setStartDate(Date.now()); } }, [isLoggedIn, startDate]);

const checkTrialValid = () => { if (!startDate) return true; const daysPassed = Math.floor((Date.now() - startDate) / (1000 * 60 * 60 * 24)); return daysPassed <= 3 || isSubscribed; };

const handleLogin = () => { if (email.includes('@') && phone.length === 10) { alert('Verification sent to email and phone'); setIsLoggedIn(true); } else { alert('Enter valid email and 10-digit phone number'); } };

const handleSubscribe = () => { setIsSubscribed(true); alert('Thank you for subscribing!'); };

const addData = () => { if (checkTrialValid()) { setStoredData(prev => prev + 1); } else { alert('Your free trial has ended. Please subscribe to continue using the service.'); } };

const useData = () => { if (!checkTrialValid()) { alert('Please subscribe to use stored data.'); return; } if (storedData >= 0.5) { setStoredData(prev => prev - 0.5); setDailyUsage(prev => prev + 0.5); } };

const resetDailyUsage = () => { setDailyUsage(0); };

const shareData = () => { if (!checkTrialValid()) { alert('Trial expired. Please subscribe to share data.'); return; } if (sim === friendSim && storedData >= 1) { setStoredData(prev => prev - 1); setFriendData(prev => prev + 1); alert('1 GB shared successfully!'); } else { alert('Cannot share: Either different SIMs or insufficient data.'); } };

if (!isLoggedIn) { return ( <div className="min-h-screen flex flex-col justify-center items-center bg-gray-100"> <div className="bg-white shadow-lg p-6 rounded-xl w-full max-w-sm"> <h1 className="text-2xl font-bold mb-4 text-center">Login to Your Data Buddy</h1> <input className="w-full p-2 mb-2 border rounded" placeholder="Email" value={email} onChange={(e) => setEmail(e.target.value)} /> <input className="w-full p-2 mb-4 border rounded" placeholder="Phone Number (10 digits)" type="number" value={phone} onChange={(e) => setPhone(e.target.value)} /> <button
className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
onClick={handleLogin}
> Verify & Login </button> </div> </div> ); }

return ( <div className="min-h-screen bg-gray-100 p-4"> <h1 className="text-3xl font-bold mb-4 text-center">Your Data Buddy</h1>

<div className="bg-white rounded-xl shadow p-4 max-w-md mx-auto mb-6">
    <h2 className="text-xl font-semibold mb-2">Your Profile</h2>
    <p>ðŸ“§ Email: {email}</p>
    <p>ðŸ“ž Phone: {phone}</p>
    <p>ðŸ“¶ SIM: {sim}</p>
    <p>ðŸ“¦ Stored Data: {storedData.toFixed(2)} GB</p>
    <p>ðŸ“… Daily Usage: {dailyUsage.toFixed(2)} GB</p>

    <div className="mt-4 flex flex-wrap gap-2">
      <button className="btn" onClick={addData}>Add 1GB</button>
      <button className="btn" onClick={useData}>Use 0.5GB</button>
      <button className="btn" onClick={resetDailyUsage}>Reset Usage</button>
    </div>

    <div className="mt-4">
      <p className="font-medium mb-1">Select SIM:</p>
      {['Jio', 'Airtel', 'Vi'].map((s) => (
        <button
          key={s}
          className={`btn ${sim === s ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
          onClick={() => setSim(s)}
        >
          {s}
        </button>
      ))}
    </div>

    {!checkTrialValid() && !isSubscribed && (
      <div className="mt-4 bg-yellow-100 p-3 rounded text-center">
        <p className="text-red-600 font-medium">Your free trial has ended.</p>
        <p className="mb-2">Subscribe for â‚¹50/month to continue using Your Data Buddy.</p>
        <button
          className="btn bg-green-600 text-white"
          onClick={handleSubscribe}
        >
          Mark as Subscribed
        </button>
      </div>
    )}
  </div>

  <div className="bg-white rounded-xl shadow p-4 max-w-md mx-auto mb-6">
    <h2 className="text-xl font-semibold mb-2">Friend's Profile</h2>
    <p>ðŸ“¶ SIM: {friendSim}</p>
    <p>ðŸ“¦ Stored Data: {friendData.toFixed(2)} GB</p>

    <div className="mt-4">
      <p className="font-medium mb-1">Select Friend's SIM:</p>
      {['Jio', 'Airtel', 'Vi'].map((s) => (
        <button
          key={s}
          className={`btn ${friendSim === s ? 'bg-green-600 text-white' : 'bg-gray-200'}`}
          onClick={() => setFriendSim(s)}
        >
          {s}
        </button>
      ))}
    </div>

    <div className="mt-4">
      <button className="btn bg-purple-600 text-white" onClick={shareData}>
        Share 1GB with Friend
      </button>
    </div>
  </div>

  <div className="bg-white rounded-xl shadow p-4 max-w-md mx-auto mb-6">
    <h2 className="text-xl font-semibold mb-2">Payment Info</h2>
    <p>ðŸŽ« Membership Plans: â‚¹50/month (Jio, Airtel, Vi)</p>
    <p className="mt-2">Pay via UPI ID: <span className="font-mono text-blue-600">{upiId}</span></p>
  </div>
</div>

); }

